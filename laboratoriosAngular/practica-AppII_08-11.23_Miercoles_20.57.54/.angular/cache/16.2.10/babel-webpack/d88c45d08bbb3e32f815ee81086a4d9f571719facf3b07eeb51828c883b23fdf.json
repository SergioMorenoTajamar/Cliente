{"ast":null,"code":"import { Subject } from \"rxjs\"; // Gesstión de procesos Asíncronos. \nimport * as i0 from \"@angular/core\";\nexport var MODES;\n(function (MODES) {\n  // hacer essto, es un proceso asíncrono porque hay que preparar los datos\n  MODES[MODES[\"CREATE\"] = 0] = \"CREATE\";\n  MODES[MODES[\"EDIT\"] = 1] = \"EDIT\";\n})(MODES || (MODES = {}));\nexport class SharedState {\n  constructor() {\n    this.modeValue = MODES.EDIT;\n    this.changes = new Subject(); // Subject pertenece a rxjs\n  }\n\n  get id() {\n    return this.idValue;\n  }\n  get mode() {\n    return this.modeValue;\n  }\n  update(mode, id) {\n    this.modeValue = mode;\n    this.idValue = id;\n    this.changes.next({\n      mode: this.modeValue,\n      id: this.idValue\n    });\n  }\n  static #_ = this.ɵfac = function SharedState_Factory(t) {\n    return new (t || SharedState)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SharedState,\n    factory: SharedState.ɵfac\n  });\n}","map":{"version":3,"names":["Subject","MODES","SharedState","constructor","modeValue","EDIT","changes","id","idValue","mode","update","next","_","_2","factory","ɵfac"],"sources":["C:\\Users\\mores\\source\\repos\\Cliente\\laboratoriosAngular\\practica-AppII_08-11.23_Miercoles_20.57.54\\src\\app\\core\\sharedState.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Observable, Subject } from \"rxjs\" // Gesstión de procesos Asíncronos. \r\nexport enum MODES {\r\n  // hacer essto, es un proceso asíncrono porque hay que preparar los datos\r\n  CREATE, EDIT \r\n}\r\nexport interface StateUpdate {\r\n  mode: MODES;\r\n  id?: number;\r\n}\r\n@Injectable()\r\nexport class SharedState {\r\n\r\n  private modeValue: MODES = MODES.EDIT;\r\n  private idValue?: number;\r\n\r\n  constructor() {\r\n    this.changes = new Subject<StateUpdate>();// Subject pertenece a rxjs\r\n  }\r\n  get id(): number | undefined { return this.idValue };\r\n\r\n  get mode(): MODES { return this.modeValue };\r\n\r\n  changes: Observable<StateUpdate> // Promesas \r\n\r\n  update(mode: MODES, id?: number) {\r\n    this.modeValue = mode;\r\n    this.idValue = id;\r\n    (this.changes as Subject<StateUpdate>).next({ \r\n      mode: this.modeValue, id: this.idValue\r\n    });\r\n  }\r\n}\r\n\r\n"],"mappings":"AACA,SAAqBA,OAAO,QAAQ,MAAM,EAAC;;AAC3C,WAAYC,KAGX;AAHD,WAAYA,KAAK;EACf;EACAA,KAAA,CAAAA,KAAA,0BAAM;EAAEA,KAAA,CAAAA,KAAA,sBAAI;AACd,CAAC,EAHWA,KAAK,KAALA,KAAK;AASjB,OAAM,MAAOC,WAAW;EAKtBC,YAAA;IAHQ,KAAAC,SAAS,GAAUH,KAAK,CAACI,IAAI;IAInC,IAAI,CAACC,OAAO,GAAG,IAAIN,OAAO,EAAe,CAAC;EAC5C;;EACA,IAAIO,EAAEA,CAAA;IAAyB,OAAO,IAAI,CAACC,OAAO;EAAC;EAEnD,IAAIC,IAAIA,CAAA;IAAY,OAAO,IAAI,CAACL,SAAS;EAAC;EAI1CM,MAAMA,CAACD,IAAW,EAAEF,EAAW;IAC7B,IAAI,CAACH,SAAS,GAAGK,IAAI;IACrB,IAAI,CAACD,OAAO,GAAGD,EAAE;IAChB,IAAI,CAACD,OAAgC,CAACK,IAAI,CAAC;MAC1CF,IAAI,EAAE,IAAI,CAACL,SAAS;MAAEG,EAAE,EAAE,IAAI,CAACC;KAChC,CAAC;EACJ;EAAC,QAAAI,CAAA,G;qBApBUV,WAAW;EAAA;EAAA,QAAAW,EAAA,G;WAAXX,WAAW;IAAAY,OAAA,EAAXZ,WAAW,CAAAa;EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}